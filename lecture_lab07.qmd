---
title: "Lecture Lab 7"
author: "Leon Eyrich Jessen, Daniel Romero"
format:
  revealjs:
    embed-resources: true
    theme: moon
    slide-number: c/t
    width: 1600
    height: 900
    mainfont: avenir
    logo: images/r4bds_logo_small.png
    footer: "**R for Bio Data Science** | Lab 7: Collaborative Bio Data Science using git and GitHub via RStudio"
---

<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## The nightmare of keeping track of file versions

![](images/many_files_joke_git.jpg){fig-align="center" width="60%"}

- How many of you have run into this situation...? Now imagine multiplying this by dozens of files in a common Bio Data Science project!
- This is nightmare to work with and terrible for reproducibility!

<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Version Control to the rescue

- To avoid situations like that, we use *Version Control System* (VCS)
- i.e., a program that allows to store snapshots that we can go back to at any point in time
- `git` is by far the most popular Version Control tool for software projects in the world (>95% of all software projects)

![](images/Git_logo.jpg){fig-align="center" height=250}

- `git` is **only for code**!

<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## The git workflow

1. <span  style="color:orange;">**Initialize**</span> the git repository (only once per project)
1. Write and modify your code as usual
1. <span  style="color:orange;">**Add**</span> your changes to the staging area
1. Review the staging area
1. <span  style="color:orange;">**Commit**</span> your changes (save a version which you can return back to at any time)
1. Return to step 2

<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## The git workflow

1. <span  style="color:orange;">**Initialize**</span> the git repository (only once per project)
1. Write and modify your code as usual
1. <span  style="color:orange;">**Add**</span> your changes to the staging area
1. Review the staging area
1. <span  style="color:orange;">**Commit**</span> your changes (save a version which you can return back to at any time) 
1. Return to step 2

- *Commit messages should be informative*
- *Ideally, every commit is a working version of the code*

<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Centralized repositories

- The most common way to use `git` is pairing it with a git repository hosting platform
- Web services that will store your git repository and give you extra features on top of `git`

<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Centralized repositories

- The most common way to use `git` is pairing it with a git repository hosting platform
- Web services that will store your git repository and give you extra features on top of `git`
- GitHub is the most popular, but there are many others:

![](images/git_hosting_logos.jpg){fig-align="center" height=300}

- `git` and GitHub are related but completely different things! Think of it as R vs. RStudio

<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Collaborative Bio Data Science using GitHub via RStudio

- When doing assignments, you discovered that it was challenging to collaborate

- Collaboration is key to success, **also** when coding!

- You could:
  - Write your code in a google doc and copy/paste
  - Send code snippets in emails
  - Use a whatsapp-group to exchange code
  - ...?


<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Collaborative Bio Data Science using GitHub via RStudio

- When doing assignments, you discovered that it was challenging to collaborate

- Collaboration is key to success, **also** when coding!

- You could:
  - Write your code in a google doc and copy/paste
  - Send code snippets in emails
  - Use a whatsapp-group to exchange code
  - Stare at the same screen and come with 17 suggestions
  - ...?

- All of which would be a recipe for inevitable disaster!


<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Okay, so... How does your team "do" it?

Github is not only a backup, but a collaboration platform

![](images/git_collab.gif){fig-align="center" height=550}

<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Pulling and pushing!

When working with collaborators, we have to add a few extra step to the git workflow...

### Before

1. <span  style="color:orange;">**Initialize**</span> the git repository (only once per project)
1. Write and modify your code as usual
1. <span  style="color:orange;">**Add**</span> your changes to the staging area
1. Review the staging area
1. <span  style="color:orange;">**Commit**</span> your changes (save a version which you can return back to at any time)
1. Return to step 2


<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Pulling and pushing!

When working with collaborators, we have to add a few extra step to the git workflow...

### After

1. <span  style="color:orange;">**Initialize**</span> the git repository (only once per project)
1. Write and modify your code as usual
1. <span  style="color:orange;">**Add**</span> your changes to the staging area
1. Review the staging area
1. <span  style="color:orange;">**Commit**</span> your changes (save a version which you can return back to at any time)
1. <span  style="color:#70c6ff;">**Pull**</span> new changes from the central repo
1. <span  style="color:#70c6ff;">**Push**</span> your changes to the central repo
1. Return to step 2

<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Pulling and pushing!

When working with collaborators, we have to add a few extra step to the git workflow...

### After*

1. <span  style="color:orange;">**Initialize**</span> the git repository (only once per project)
1. Write and modify your code as usual
1. <span  style="color:orange;">**Add**</span> your changes to the staging area
1. Review the staging area
1. <span  style="color:orange;">**Commit**</span> your changes (save a version which you can return back to at any time)
1. <span  style="color:#70c6ff;">**Pull**</span> new changes from the central repo
1. [Occasionally] <span  style="color:#ed4a4a;">**Solve merge conflicts**</span>
1. <span  style="color:#70c6ff;">**Push**</span> your changes to the central repo
1. Return to step 2

<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Branching, a way of developing in parallel

With branches, you can work on your own without disturbing or getting disturbed by other people, then merge at the end.

![](images/git_branching_merging.png){fig-align="center" height=500}

<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Pull requests: contributing other people's software

A feature of GitHub to contribute to other people's code: work on your own independent branch, then request the maintainers that to pull your code into the main branch

![](images/github_PR_example.jpg){fig-align="center"}


<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## Final notes

- `git` is a powerful tool for reproducible data science
- We won't do it today, but `git` is most powerful from the Terminal
- We will intentionally run you through the common issues with `git`. Don't get discouraged!


<!--# ---------------------------------------------------------------------- -->
<!--# SLIDE ---------------------------------------------------------------- -->
<!--# ---------------------------------------------------------------------- -->
## But really, the best thing is to...

- Try it out for your self
- <span  style="color:white">**FOLLOWING TODAY'S EXERCISES POINT-BY-POINT IS SUPERCALIFRAGILISTICEXPIALIDOCIOUS!!!**</span>
- Break and then exercises
